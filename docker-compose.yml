version: '3.9'

services:
  # API Gateway (Traefik)
  traefik:
    image: traefik:v2.10
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - traefik

  # # Auth Service
  # auth-service:
  #   image: my-auth-service:latest
  #   environment:
  #     - DATABASE_URL=postgres://auth_user:auth_pass@postgres/auth_db
  #   labels:
  #     - "traefik.http.routers.auth.rule=Host(`auth.localhost`)"
  #   networks:
  #     - backend
  #     - traefik
  #   depends_on:
  #     - postgres

  # # User Service
  # user-service:
  #   image: my-user-service:latest
  #   environment:
  #     - DATABASE_URL=postgres://user_user:user_pass@postgres/user_db
  #   labels:
  #     - "traefik.http.routers.user.rule=Host(`user.localhost`)"
  #   networks:
  #     - backend
  #     - traefik
  #   depends_on:
  #     - postgres

  # # Album Service
  # album-service:
  #   image: my-album-service:latest
  #   environment:
  #     - DATABASE_URL=postgres://album_user:album_pass@postgres/album_db
  #   labels:
  #     - "traefik.http.routers.album.rule=Host(`album.localhost`)"
  #   networks:
  #     - backend
  #     - traefik
  #   depends_on:
  #     - postgres
  #     - minio

  # # Likes Service
  # likes-service:
  #   image: my-likes-service:latest
  #   environment:
  #     - REDIS_HOST=redis
  #   labels:
  #     - "traefik.http.routers.likes.rule=Host(`likes.localhost`)"
  #   networks:
  #     - backend
  #     - traefik
  #   depends_on:
  #     - redis

  # # Notification Service
  # notification-service:
  #   image: my-notification-service:latest
  #   labels:
  #     - "traefik.http.routers.notifications.rule=Host(`notifications.localhost`)"
  #   networks:
  #     - backend
  #     - traefik
  #   depends_on:
  #     - redis

  # PostgreSQL Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: main_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend

  # Redis for Caching
  redis:
    image: redis:7
    networks:
      - backend

  # MinIO for File Storage
  minio:
    image: minio/minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - backend

  # Vault for Secrets Management
  vault:
    image: hashicorp/vault
    cap_add:
      - IPC_LOCK
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=myroot
    ports:
      - "8200:8200"
    networks:
      - backend

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - monitoring

  # Grafana for Visualization
  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    networks:
      - monitoring
    depends_on:
      - prometheus

  # Loki for Log Aggregation
  loki:
    image: grafana/loki
    ports:
      - "3100:3100"
    networks:
      - monitoring

networks:
  traefik:
  backend:
  monitoring:


volumes:
  postgres_data:
  minio_data:
